[project]
name = "yamcs-mcp-server"
version = "0.1.0"
description = "MCP Server for Yamcs Mission Control System"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
]
keywords = ["yamcs", "mcp", "mission-control", "space", "telemetry", "fastmcp"]

dependencies = [
    "fastmcp>=2.9.0",           # Latest FastMCP with composition features
    "yamcs-client>=1.9.0",      # Latest Yamcs client with async support
    "pydantic>=2.5.0",          # Modern data validation with v2 performance
    "pydantic-settings>=2.1.0", # Settings management
    "structlog>=23.2.0",        # Structured logging
    "rich>=13.7.0",             # Beautiful console output and logging
    "httpx>=0.25.0",            # Modern HTTP client (if needed)
    "anyio>=4.0.0",             # Enhanced async utilities
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",              # Latest linting and formatting
    "mypy>=1.8.0",              # Type checking
    "pytest>=7.4.0",            # Testing framework  
    "pytest-asyncio>=0.21.0",   # Async testing support
    "pytest-cov>=4.1.0",        # Coverage reporting
    "pytest-mock>=3.12.0",      # Mocking utilities
    "pytest-httpx>=0.26.0",     # HTTP testing
    "pre-commit>=3.6.0",        # Git hooks for quality
]

docs = [
    "mkdocs>=1.5.0",            # Documentation
    "mkdocs-material>=9.4.0",   # Modern docs theme
    "mkdocstrings[python]>=0.24.0", # API docs generation
]

[project.scripts]
yamcs-mcp = "yamcs_mcp.server:main"

[project.urls]
Homepage = "https://github.com/USERNAME/yamcs-mcp-server"
Documentation = "https://USERNAME.github.io/yamcs-mcp-server"
Repository = "https://github.com/USERNAME/yamcs-mcp-server"
Issues = "https://github.com/USERNAME/yamcs-mcp-server/issues"
Changelog = "https://github.com/USERNAME/yamcs-mcp-server/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/yamcs_mcp"]

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src", "tests"]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
    "N",   # pep8-naming
    "D",   # pydocstyle
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
    "TRY", # tryceratops
    "PERF", # perflint
    "SIM", # flake8-simplify
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B018", "RUF012", "S101", "ANN201", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["yamcs_mcp"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "yamcs.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "--cov=yamcs_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "-vv",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Tests that take a long time to run",
]

[tool.coverage.run]
source = ["src/yamcs_mcp"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "Protocol",
    "@abstractmethod",
]